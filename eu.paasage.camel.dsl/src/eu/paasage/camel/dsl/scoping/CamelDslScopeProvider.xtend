/*
 * generated by Xtext
 */
package eu.paasage.camel.dsl.scoping

import eu.paasage.camel.deployment.CommunicationInstance
import eu.paasage.camel.deployment.ComponentInstance
import eu.paasage.camel.deployment.DeploymentModel
import eu.paasage.camel.deployment.DeploymentPackage
import eu.paasage.camel.deployment.HostingInstance
import eu.paasage.camel.deployment.InternalComponentInstance
import eu.paasage.camel.deployment.ProvidedCommunicationInstance
import eu.paasage.camel.deployment.ProvidedHostInstance
import eu.paasage.camel.deployment.RequiredCommunicationInstance
import eu.paasage.camel.deployment.RequiredHostInstance
import java.util.ArrayList
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import eu.paasage.camel.deployment.VM
import eu.paasage.camel.deployment.VMRequirementSet
import org.eclipse.xtext.naming.QualifiedName
import eu.paasage.camel.organisation.RoleAssignment
import eu.paasage.camel.organisation.OrganisationModel
import eu.paasage.camel.organisation.OrganisationPackage
import eu.paasage.camel.organisation.User
import eu.paasage.camel.organisation.Organisation
import eu.paasage.camel.metric.MetricPackage
import eu.paasage.camel.metric.RawMetricContext
import eu.paasage.camel.metric.MetricModel
import eu.paasage.camel.metric.Sensor
import eu.paasage.camel.requirement.RequirementPackage
import eu.paasage.camel.requirement.RequirementGroup
import eu.paasage.camel.requirement.RequirementModel
import eu.paasage.camel.requirement.Requirement
import eu.paasage.camel.execution.Measurement
import eu.paasage.camel.execution.ExecutionPackage
import eu.paasage.camel.execution.ExecutionModel
import eu.paasage.camel.execution.ExecutionContext
import eu.paasage.camel.CamelModel
import eu.paasage.camel.metric.MetricObjectBinding
import eu.paasage.camel.metric.MetricInstance
import eu.paasage.camel.execution.SLOAssessment
import eu.paasage.camel.security.SecurityCapability
import eu.paasage.camel.security.SecurityPackage
import eu.paasage.camel.security.SecurityModel
import eu.paasage.camel.security.SecurityControl

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class CamelDslScopeProvider extends AbstractDeclarativeScopeProvider {
	extension CamelQualifiedNameProvider _provider = new CamelQualifiedNameProvider()
	def scope_CommunicationInstance_requiredCommunicationInstance(CommunicationInstance ri, EReference ref){
		if(ref == DeploymentPackage.Literals.COMMUNICATION_INSTANCE__REQUIRED_COMMUNICATION_INSTANCE){
			val model = ri.eContainer as DeploymentModel
			val list = new ArrayList<RequiredCommunicationInstance>()
			val clist = new ArrayList<InternalComponentInstance>()
			for(ci : model.internalComponentInstances){
				clist.add(ci)
				list.addAll(ci.requiredCommunicationInstances)
			}
			return Scopes.scopeFor(
				list, 
				[RequiredCommunicationInstance e | e.qualifiedName],
				Scopes.scopeFor(clist)
			)
		}
	}
	
	def scope_VM_vmRequirementSet(VM vm, EReference ref){
		if(ref == DeploymentPackage.Literals.VM__VM_REQUIREMENT_SET){
			val dm = vm.eContainer as DeploymentModel
			val list = dm.vmRequirementSets
			return Scopes.scopeFor(
				list,
				[VMRequirementSet e |  QualifiedName.create(e.name)],
				Scopes.scopeFor(newArrayList(dm))
			)
		}
	}
	
	def scope_CommunicationInstance_providedCommunicationInstance(CommunicationInstance ri, EReference ref){
		val model = ri.eContainer as DeploymentModel
		val list = new ArrayList<ProvidedCommunicationInstance>()
		val clist = new ArrayList<ComponentInstance>()
		for(ci : model.internalComponentInstances){
			clist.add(ci)
			list.addAll(ci.providedCommunicationInstances)
		}	
		for(vi : model.vmInstances){
			clist.add(vi)
			list.addAll(vi.providedCommunicationInstances)
		}	
		return Scopes.scopeFor(
			list,
			[ProvidedCommunicationInstance e | e.qualifiedName], 
			Scopes.scopeFor(clist)
		)
	}
	
	def scope_HostingInstance_providedHostInstance(HostingInstance ri, EReference ref){
		val model = ri.eContainer as DeploymentModel
		val list = new ArrayList<ProvidedHostInstance>()
		val clist = new ArrayList<ComponentInstance>()
		for(ci : model.internalComponentInstances){
			clist.add(ci)
			list.addAll(ci.providedHostInstances)
		}
		for(vi : model.vmInstances){
			clist.add(vi)
			list.addAll(vi.providedHostInstances)
		}	
		return Scopes.scopeFor(
			list,
			[ProvidedHostInstance e | e.qualifiedName], 
			Scopes.scopeFor(clist)
		)
	}
	
	def scope_HostingInstance_requiredHostInstance(HostingInstance ri, EReference ref){
		val model = ri.eContainer as DeploymentModel
		return Scopes.scopeFor(
			model.internalComponentInstances.map[e|e.requiredHostInstance],
			[RequiredHostInstance e | e.qualifiedName], 
			Scopes.scopeFor(model.internalComponentInstances)
		)
	}

	def scope_RequirementGroup_requirements(RequirementGroup rg, EReference ref){
		if(ref == RequirementPackage.Literals.REQUIREMENT_GROUP__REQUIREMENTS){
			val om = rg.eContainer as RequirementModel
			val list = om.requirements
			return Scopes.scopeFor(
				list,
				[Requirement e |  e.qualifiedName],
				Scopes.scopeFor(newArrayList(om))
			)
		}
	}
	
	def scope_RoleAssignment_user(RoleAssignment ra, EReference ref){
		if(ref == OrganisationPackage.Literals.ROLE_ASSIGNMENT__USER){
			val om = ra.eContainer as OrganisationModel
			val list = om.users
			return Scopes.scopeFor(
				list,
				[User e |  e.qualifiedName],
				Scopes.scopeFor(newArrayList(om))
			)
		}
	}
	
	def scope_RawMetricContext_sensor(RawMetricContext ra, EReference ref){
		if(ref == MetricPackage.Literals.RAW_METRIC_CONTEXT__SENSOR){
			val mm = ra.eContainer as MetricModel
			val sensors = mm.sensors
			return Scopes.scopeFor(
				sensors,
				[Sensor e |  e.qualifiedName],
				Scopes.scopeFor(newArrayList(mm))
			)
		}
	}
	
	def scope_Measurement_executionContext(Measurement m, EReference ref){
		if(ref == ExecutionPackage.Literals.MEASUREMENT__EXECUTION_CONTEXT){
			val mm = m.eContainer as ExecutionModel
			val ecs = mm.executionContexts
			return Scopes.scopeFor(
				ecs,
				[ExecutionContext e |  e.qualifiedName],
				Scopes.scopeFor(newArrayList(mm))
			)
		}
	}
	
	def scope_MetricObjectBinding_executionContext(MetricObjectBinding m, EReference ref){
		if(ref == MetricPackage.Literals.METRIC_OBJECT_BINDING__EXECUTION_CONTEXT){
			val mm = m.eContainer.eContainer as CamelModel
			val ecs = mm.executionModels.get(0).executionContexts
			return Scopes.scopeFor(
				ecs,
				[ExecutionContext e |  e.qualifiedName],
				Scopes.scopeFor(newArrayList(mm))
			)
		}
	}
	
	def scope_SLOAssessment_measurement(SLOAssessment a, EReference ref){
		if(ref == ExecutionPackage.Literals.SLO_ASSESSMENT__MEASUREMENT){
			val mm = a.eContainer as ExecutionModel
			val ecs = mm.measurements
			return Scopes.scopeFor(
				ecs,
				[Measurement e |  e.qualifiedName],
				Scopes.scopeFor(newArrayList(mm))
			)
		}
	}
	
	def scope_SecurityCapability_securityControls(SecurityCapability a, EReference ref){
		if(ref == SecurityPackage.Literals.SECURITY_CAPABILITY__SECURITY_CONTROLS){
			val sm = a.eContainer as SecurityModel
			val ecs = sm.securityControls
			return Scopes.scopeFor(
				ecs,
				[SecurityControl e |  e.qualifiedName],
				Scopes.scopeFor(newArrayList(sm))
			)
		}
	}
}

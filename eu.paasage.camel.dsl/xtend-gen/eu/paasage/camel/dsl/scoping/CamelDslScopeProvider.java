/**
 * generated by Xtext
 */
package eu.paasage.camel.dsl.scoping;

import com.google.common.base.Function;
import com.google.common.base.Objects;
import eu.paasage.camel.CamelModel;
import eu.paasage.camel.deployment.CommunicationInstance;
import eu.paasage.camel.deployment.ComponentInstance;
import eu.paasage.camel.deployment.DeploymentModel;
import eu.paasage.camel.deployment.DeploymentPackage;
import eu.paasage.camel.deployment.HostingInstance;
import eu.paasage.camel.deployment.InternalComponentInstance;
import eu.paasage.camel.deployment.ProvidedCommunicationInstance;
import eu.paasage.camel.deployment.ProvidedHostInstance;
import eu.paasage.camel.deployment.RequiredCommunicationInstance;
import eu.paasage.camel.deployment.RequiredHostInstance;
import eu.paasage.camel.deployment.VM;
import eu.paasage.camel.deployment.VMInstance;
import eu.paasage.camel.deployment.VMRequirementSet;
import eu.paasage.camel.dsl.scoping.CamelQualifiedNameProvider;
import eu.paasage.camel.execution.ExecutionContext;
import eu.paasage.camel.execution.ExecutionModel;
import eu.paasage.camel.execution.ExecutionPackage;
import eu.paasage.camel.execution.Measurement;
import eu.paasage.camel.execution.SLOAssessment;
import eu.paasage.camel.metric.MetricModel;
import eu.paasage.camel.metric.MetricObjectBinding;
import eu.paasage.camel.metric.MetricPackage;
import eu.paasage.camel.metric.RawMetricContext;
import eu.paasage.camel.metric.Sensor;
import eu.paasage.camel.organisation.OrganisationModel;
import eu.paasage.camel.organisation.OrganisationPackage;
import eu.paasage.camel.organisation.RoleAssignment;
import eu.paasage.camel.organisation.User;
import eu.paasage.camel.requirement.Requirement;
import eu.paasage.camel.requirement.RequirementGroup;
import eu.paasage.camel.requirement.RequirementModel;
import eu.paasage.camel.requirement.RequirementPackage;
import eu.paasage.camel.security.SecurityCapability;
import eu.paasage.camel.security.SecurityControl;
import eu.paasage.camel.security.SecurityModel;
import eu.paasage.camel.security.SecurityPackage;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class CamelDslScopeProvider extends AbstractDeclarativeScopeProvider {
  @Extension
  private CamelQualifiedNameProvider _provider = new CamelQualifiedNameProvider();
  
  public IScope scope_CommunicationInstance_requiredCommunicationInstance(final CommunicationInstance ri, final EReference ref) {
    boolean _equals = Objects.equal(ref, DeploymentPackage.Literals.COMMUNICATION_INSTANCE__REQUIRED_COMMUNICATION_INSTANCE);
    if (_equals) {
      EObject _eContainer = ri.eContainer();
      final DeploymentModel model = ((DeploymentModel) _eContainer);
      final ArrayList<RequiredCommunicationInstance> list = new ArrayList<RequiredCommunicationInstance>();
      final ArrayList<InternalComponentInstance> clist = new ArrayList<InternalComponentInstance>();
      EList<InternalComponentInstance> _internalComponentInstances = model.getInternalComponentInstances();
      for (final InternalComponentInstance ci : _internalComponentInstances) {
        {
          clist.add(ci);
          EList<RequiredCommunicationInstance> _requiredCommunicationInstances = ci.getRequiredCommunicationInstances();
          list.addAll(_requiredCommunicationInstances);
        }
      }
      final Function<RequiredCommunicationInstance, QualifiedName> _function = (RequiredCommunicationInstance e) -> {
        return this._provider.qualifiedName(e);
      };
      IScope _scopeFor = Scopes.scopeFor(clist);
      return Scopes.<RequiredCommunicationInstance>scopeFor(list, _function, _scopeFor);
    }
    return null;
  }
  
  public IScope scope_VM_vmRequirementSet(final VM vm, final EReference ref) {
    boolean _equals = Objects.equal(ref, DeploymentPackage.Literals.VM__VM_REQUIREMENT_SET);
    if (_equals) {
      EObject _eContainer = vm.eContainer();
      final DeploymentModel dm = ((DeploymentModel) _eContainer);
      final EList<VMRequirementSet> list = dm.getVmRequirementSets();
      final Function<VMRequirementSet, QualifiedName> _function = (VMRequirementSet e) -> {
        String _name = e.getName();
        return QualifiedName.create(_name);
      };
      ArrayList<DeploymentModel> _newArrayList = CollectionLiterals.<DeploymentModel>newArrayList(dm);
      IScope _scopeFor = Scopes.scopeFor(_newArrayList);
      return Scopes.<VMRequirementSet>scopeFor(list, _function, _scopeFor);
    }
    return null;
  }
  
  public IScope scope_CommunicationInstance_providedCommunicationInstance(final CommunicationInstance ri, final EReference ref) {
    EObject _eContainer = ri.eContainer();
    final DeploymentModel model = ((DeploymentModel) _eContainer);
    final ArrayList<ProvidedCommunicationInstance> list = new ArrayList<ProvidedCommunicationInstance>();
    final ArrayList<ComponentInstance> clist = new ArrayList<ComponentInstance>();
    EList<InternalComponentInstance> _internalComponentInstances = model.getInternalComponentInstances();
    for (final InternalComponentInstance ci : _internalComponentInstances) {
      {
        clist.add(ci);
        EList<ProvidedCommunicationInstance> _providedCommunicationInstances = ci.getProvidedCommunicationInstances();
        list.addAll(_providedCommunicationInstances);
      }
    }
    EList<VMInstance> _vmInstances = model.getVmInstances();
    for (final VMInstance vi : _vmInstances) {
      {
        clist.add(vi);
        EList<ProvidedCommunicationInstance> _providedCommunicationInstances = vi.getProvidedCommunicationInstances();
        list.addAll(_providedCommunicationInstances);
      }
    }
    final Function<ProvidedCommunicationInstance, QualifiedName> _function = (ProvidedCommunicationInstance e) -> {
      return this._provider.qualifiedName(e);
    };
    IScope _scopeFor = Scopes.scopeFor(clist);
    return Scopes.<ProvidedCommunicationInstance>scopeFor(list, _function, _scopeFor);
  }
  
  public IScope scope_HostingInstance_providedHostInstance(final HostingInstance ri, final EReference ref) {
    EObject _eContainer = ri.eContainer();
    final DeploymentModel model = ((DeploymentModel) _eContainer);
    final ArrayList<ProvidedHostInstance> list = new ArrayList<ProvidedHostInstance>();
    final ArrayList<ComponentInstance> clist = new ArrayList<ComponentInstance>();
    EList<InternalComponentInstance> _internalComponentInstances = model.getInternalComponentInstances();
    for (final InternalComponentInstance ci : _internalComponentInstances) {
      {
        clist.add(ci);
        EList<ProvidedHostInstance> _providedHostInstances = ci.getProvidedHostInstances();
        list.addAll(_providedHostInstances);
      }
    }
    EList<VMInstance> _vmInstances = model.getVmInstances();
    for (final VMInstance vi : _vmInstances) {
      {
        clist.add(vi);
        EList<ProvidedHostInstance> _providedHostInstances = vi.getProvidedHostInstances();
        list.addAll(_providedHostInstances);
      }
    }
    final Function<ProvidedHostInstance, QualifiedName> _function = (ProvidedHostInstance e) -> {
      return this._provider.qualifiedName(e);
    };
    IScope _scopeFor = Scopes.scopeFor(clist);
    return Scopes.<ProvidedHostInstance>scopeFor(list, _function, _scopeFor);
  }
  
  public IScope scope_HostingInstance_requiredHostInstance(final HostingInstance ri, final EReference ref) {
    EObject _eContainer = ri.eContainer();
    final DeploymentModel model = ((DeploymentModel) _eContainer);
    EList<InternalComponentInstance> _internalComponentInstances = model.getInternalComponentInstances();
    final Function1<InternalComponentInstance, RequiredHostInstance> _function = (InternalComponentInstance e) -> {
      return e.getRequiredHostInstance();
    };
    List<RequiredHostInstance> _map = ListExtensions.<InternalComponentInstance, RequiredHostInstance>map(_internalComponentInstances, _function);
    final Function<RequiredHostInstance, QualifiedName> _function_1 = (RequiredHostInstance e) -> {
      return this._provider.qualifiedName(e);
    };
    EList<InternalComponentInstance> _internalComponentInstances_1 = model.getInternalComponentInstances();
    IScope _scopeFor = Scopes.scopeFor(_internalComponentInstances_1);
    return Scopes.<RequiredHostInstance>scopeFor(_map, _function_1, _scopeFor);
  }
  
  public IScope scope_RequirementGroup_requirements(final RequirementGroup rg, final EReference ref) {
    boolean _equals = Objects.equal(ref, RequirementPackage.Literals.REQUIREMENT_GROUP__REQUIREMENTS);
    if (_equals) {
      EObject _eContainer = rg.eContainer();
      final RequirementModel om = ((RequirementModel) _eContainer);
      final EList<Requirement> list = om.getRequirements();
      final Function<Requirement, QualifiedName> _function = (Requirement e) -> {
        return this._provider.qualifiedName(e);
      };
      ArrayList<RequirementModel> _newArrayList = CollectionLiterals.<RequirementModel>newArrayList(om);
      IScope _scopeFor = Scopes.scopeFor(_newArrayList);
      return Scopes.<Requirement>scopeFor(list, _function, _scopeFor);
    }
    return null;
  }
  
  public IScope scope_RoleAssignment_user(final RoleAssignment ra, final EReference ref) {
    boolean _equals = Objects.equal(ref, OrganisationPackage.Literals.ROLE_ASSIGNMENT__USER);
    if (_equals) {
      EObject _eContainer = ra.eContainer();
      final OrganisationModel om = ((OrganisationModel) _eContainer);
      final EList<User> list = om.getUsers();
      final Function<User, QualifiedName> _function = (User e) -> {
        return this._provider.qualifiedName(e);
      };
      ArrayList<OrganisationModel> _newArrayList = CollectionLiterals.<OrganisationModel>newArrayList(om);
      IScope _scopeFor = Scopes.scopeFor(_newArrayList);
      return Scopes.<User>scopeFor(list, _function, _scopeFor);
    }
    return null;
  }
  
  public IScope scope_RawMetricContext_sensor(final RawMetricContext ra, final EReference ref) {
    boolean _equals = Objects.equal(ref, MetricPackage.Literals.RAW_METRIC_CONTEXT__SENSOR);
    if (_equals) {
      EObject _eContainer = ra.eContainer();
      final MetricModel mm = ((MetricModel) _eContainer);
      final EList<Sensor> sensors = mm.getSensors();
      final Function<Sensor, QualifiedName> _function = (Sensor e) -> {
        return this._provider.qualifiedName(e);
      };
      ArrayList<MetricModel> _newArrayList = CollectionLiterals.<MetricModel>newArrayList(mm);
      IScope _scopeFor = Scopes.scopeFor(_newArrayList);
      return Scopes.<Sensor>scopeFor(sensors, _function, _scopeFor);
    }
    return null;
  }
  
  public IScope scope_Measurement_executionContext(final Measurement m, final EReference ref) {
    boolean _equals = Objects.equal(ref, ExecutionPackage.Literals.MEASUREMENT__EXECUTION_CONTEXT);
    if (_equals) {
      EObject _eContainer = m.eContainer();
      final ExecutionModel mm = ((ExecutionModel) _eContainer);
      final EList<ExecutionContext> ecs = mm.getExecutionContexts();
      final Function<ExecutionContext, QualifiedName> _function = (ExecutionContext e) -> {
        return this._provider.qualifiedName(e);
      };
      ArrayList<ExecutionModel> _newArrayList = CollectionLiterals.<ExecutionModel>newArrayList(mm);
      IScope _scopeFor = Scopes.scopeFor(_newArrayList);
      return Scopes.<ExecutionContext>scopeFor(ecs, _function, _scopeFor);
    }
    return null;
  }
  
  public IScope scope_MetricObjectBinding_executionContext(final MetricObjectBinding m, final EReference ref) {
    boolean _equals = Objects.equal(ref, MetricPackage.Literals.METRIC_OBJECT_BINDING__EXECUTION_CONTEXT);
    if (_equals) {
      EObject _eContainer = m.eContainer();
      EObject _eContainer_1 = _eContainer.eContainer();
      final CamelModel mm = ((CamelModel) _eContainer_1);
      EList<ExecutionModel> _executionModels = mm.getExecutionModels();
      ExecutionModel _get = _executionModels.get(0);
      final EList<ExecutionContext> ecs = _get.getExecutionContexts();
      final Function<ExecutionContext, QualifiedName> _function = (ExecutionContext e) -> {
        return this._provider.qualifiedName(e);
      };
      ArrayList<CamelModel> _newArrayList = CollectionLiterals.<CamelModel>newArrayList(mm);
      IScope _scopeFor = Scopes.scopeFor(_newArrayList);
      return Scopes.<ExecutionContext>scopeFor(ecs, _function, _scopeFor);
    }
    return null;
  }
  
  public IScope scope_SLOAssessment_measurement(final SLOAssessment a, final EReference ref) {
    boolean _equals = Objects.equal(ref, ExecutionPackage.Literals.SLO_ASSESSMENT__MEASUREMENT);
    if (_equals) {
      EObject _eContainer = a.eContainer();
      final ExecutionModel mm = ((ExecutionModel) _eContainer);
      final EList<Measurement> ecs = mm.getMeasurements();
      final Function<Measurement, QualifiedName> _function = (Measurement e) -> {
        return this._provider.qualifiedName(e);
      };
      ArrayList<ExecutionModel> _newArrayList = CollectionLiterals.<ExecutionModel>newArrayList(mm);
      IScope _scopeFor = Scopes.scopeFor(_newArrayList);
      return Scopes.<Measurement>scopeFor(ecs, _function, _scopeFor);
    }
    return null;
  }
  
  public IScope scope_SecurityCapability_securityControls(final SecurityCapability a, final EReference ref) {
    boolean _equals = Objects.equal(ref, SecurityPackage.Literals.SECURITY_CAPABILITY__SECURITY_CONTROLS);
    if (_equals) {
      EObject _eContainer = a.eContainer();
      final SecurityModel sm = ((SecurityModel) _eContainer);
      final EList<SecurityControl> ecs = sm.getSecurityControls();
      final Function<SecurityControl, QualifiedName> _function = (SecurityControl e) -> {
        return this._provider.qualifiedName(e);
      };
      ArrayList<SecurityModel> _newArrayList = CollectionLiterals.<SecurityModel>newArrayList(sm);
      IScope _scopeFor = Scopes.scopeFor(_newArrayList);
      return Scopes.<SecurityControl>scopeFor(ecs, _function, _scopeFor);
    }
    return null;
  }
}
